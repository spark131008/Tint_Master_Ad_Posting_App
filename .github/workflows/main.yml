# This is a basic workflow to help you get started with Actions

name: CI/CD

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "prod" ]
  pull_request:
    branches: [ "prod" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch: {}

env:
  AWS_REGION: us-east-1                   # set this to your preferred AWS region, e.g. us-west-1
  SYSTEM_TAG: GTECH-AUTO-POSTING-APP
  ENVIRONMENT: prod

permissions:
  contents: read

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    name: Build
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Check out code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: upload html scripts to s3
        run: |
          aws s3 cp ./html_scripts/* s3://gtech-posting-app/ad-html-script-store/

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: image-build
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: gtech_posting_lambda
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd lambda_code
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "ImageUri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    outputs:
      image_uri: ${{ steps.image-build.outputs.ImageUri }}

#      - name: Set up Python
#        uses: actions/setup-python@v3
#        with:
#          python-version: "3.9.13"

#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install --target=lib/ boto3
#          pip install --target=lib/ botocore
#          pip install --target=lib/ wheel
#          pip install --target=lib/ selenium==4.3.0
#
#          curl -SL https://chromedriver.storage.googleapis.com/103.0.5060.134/chromedriver_linux64.zip > lib/chromedriver.zip
#          curl -SL https://www.googleapis.com/download/storage/v1/b/chromium-browser-snapshots/o/Linux_x64%2F1002910%2Fchrome-linux.zip?alt=media > lib/chrome-linux.zip
#          cd ./lib
#          unzip chromedriver.zip
#          unzip chrome-linux.zip
#          rm chromedriver.zip
#          rm chrome-linux.zip
#          cd ..
#
#          ls /home/runner/work/Tint_Master_Ad_Posting_App/Tint_Master_Ad_Posting_App/lambda_code/
#          cp /home/runner/work/Tint_Master_Ad_Posting_App/Tint_Master_Ad_Posting_App/lambda_code/* ./lib/
#          cd ./lib
#          zip -r test.zip .
#          cd ..

  deploy:
    name: Deploy
    needs: [build]
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create IAM Role for GTECH AUTO POSTING Lambda
        uses: aws-actions/aws-cloudformation-github-deploy@v1.0.3
        with:
          name: gtech-ad-posting-app-lambda-iam-role
          template: aws/lambda-iam-role.yml
          no-fail-on-empty-changeset: "1"
          capabilities: CAPABILITY_NAMED_IAM
          tags: |
            SystemTag: ${{ env.SYSTEM_TAG }}

      - name: Run echo
        run: echo "${{ needs.build.outputs.image_uri }}"

      - name: Create GTECH AUTO POSTING Lambda
        uses: aws-actions/aws-cloudformation-github-deploy@v1.0.3
        with:
          name: gtech-ad-posting-app-lambda-func
          template: aws/lambda-deploy.yml
          no-fail-on-empty-changeset: "1"
          capabilities: CAPABILITY_NAMED_IAM
          parameter-overrides: >-
            ImageUri=${{ needs.build.outputs.image_uri }}
          tags: |
            SystemTag: ${{ env.SYSTEM_TAG }}


#      - uses: aws-actions/setup-sam@v2
#        with:
#          version: "1.41.0"
#
#      - name: SAM Build
#        run: |
#          sam build \
#            --build-dir ./build \
#            --base-dir ./lambda_code \
#            --template-file ./aws/template.yaml \
#            --manifest ./aws/requirements.txt
#
#
#      - name: SAM Lambda deploy
#        run: |
#          sam deploy \
#            --template-file build/template.yaml \
#            --s3-bucket tint-master \
#            --s3-prefix gtech-auto-posting-app \
#            --region ${{ env.AWS_REGION }} \
#            --stack-name gtech-auto-posting-app-lambda \
#            --no-confirm-changeset \
#            --no-fail-on-empty-changeset \
#            --parameter-overrides Name=gtech-auto-posting-app
